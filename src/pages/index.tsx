import BluetoothScale from '@components/bluetooth/BluetoothScale'
import { ScaleBluetoothIds } from '@enums/ScaleBluetoothIds'
import Scale from '@modules/scale/Scale'
import { BluetoothOutlined } from '@mui/icons-material'
import { Button } from '@mui/material'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useState } from 'react'
import styles from '../styles/Home.module.css'


const scaleDeviceRequestOptions: RequestDeviceOptions = {
  optionalServices: [ScaleBluetoothIds.PRIMARY_SERVICE_ID],
  acceptAllDevices: true
}

const Home: NextPage = () => {
  const [bluetoothDevice, setBluetoothDevice] = useState<BluetoothDevice | null>(null)
  const [weight, setWeight] = useState(0)

  const handleWeightChange = (e: any) => {
    const { value: dataView } = e.target
    /* const value = e.target.value */
    /* console.log(new Uint16Array(value.buffer)[0])  */
    const measuredWeight = dataView.getFloat32(0, true)
    console.log(measuredWeight)
    setWeight(measuredWeight)
  }

  const findDevice = async () => {
    const foundBluetoothDevice = await navigator.bluetooth.requestDevice(scaleDeviceRequestOptions)
      .catch((error: any) => { console.log(error.message) })

    if (foundBluetoothDevice) {
      console.log(foundBluetoothDevice)
      setBluetoothDevice(foundBluetoothDevice)
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* {bluetoothDevice !== null ? <BluetoothScale device={bluetoothDevice} handleWeightChange={handleWeightChange} /> : null}
      {bluetoothDevice === null ?
        <Button onClick={async () => await findDevice()} variant="outlined" endIcon={<BluetoothOutlined />}>Connect</Button>
        : <Scale weight={weight} />} */}
      <Scale weight={4} />

    </>
  )
}

export default Home
